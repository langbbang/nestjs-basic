** NodeJS 구조
 - NodeJS란, 브라우저 밖에서도 back-end runtime 으로 Javascript 가 구동되는 환경
 - Non-Blocking I/O, 싱글 스레드
 - V8 엔진 / libuv / 내장 라이브러리(llhttp, c-ares, OpenSSL, zlib)


1. libuv : 비동기 작업을 위하여 Thread Pool, Non-Blocking I/O 작업을 담당하는 라이브러리
 - 현재 작업이 진행되고 있더라도 막지 않고 또 다른 작업을 진행할 수 있다. -> Non-Blocking I/O
   또 다른 작업을 진행하기 위하여 멀티 스레드를 지원한다.

 - libuv 에게 파일 읽기와 같은 비동기 작업을 요청하면 libuv는 이 작업을 커널이 지원하는지 확인한다.
   만약 지원한다면 libuv가 대신 커널에게 비동기적으로 요청했다가 응답이 오면 그 응답을 우리에게 전달해준다.
   만약 요청한 작업을 커널이 지원하지 않는다면 자신만의 워커 스레드가 담긴 스레드 풀을 사용한다.

 - NodeJS는 I/O 작업을 자신의 메인 스레드가 아닌 다른 스레드에 위임함으로써 싱글 스레드로 Non-Blocking I/O를 지원한다.
   다르게 말하면 NodeJS는 I/O 작업을 libuv에게 위임함으로써 Non-Blocking I/O를 지원하고 그 기반에는 이벤트 루프가 있다.


1-1. 이벤트루프
 - 이벤트 루프는 시스템 커널에 작업을 넘겨서,
   NodeJS가 Non-Blocking I/O 작업을 수행하도록 해준다. -> Javascript가 싱글 스레드임에도 비동기가 가능한 이유
   대부분의 현재 커널은 멀티 스레드이므로 백그라운드 환경에서 다수의 작업을 실행할 수 있다.
   NodeJS에서 커널로 작업을 넘기고, 커널에서 작업 중 하나가 완료된다면 NodeJS에게 알려주어 적절한 콜백을 Poll 큐에 추가하여 실행한다.





** NestJS 구조

1. main.ts 파일을 통해 서버가 실행 -> NestFactory는 응용프로그램을 시작하는데 필요한 클래스를 인스턴스화 하고 종속성을 주입을 통해 연결

2. 모듈러 아키텍처

3. NestJS는 Singleton 패턴을 지향하기 때문에 인스턴스를 직접 생성하지 않고 모듈을 통해 Injection 하는 패턴을 권장




** NestJS vs Spring MVC

1. Spring을 사용하는 것이 좋을 때
 - 핀테크와 같이 금융정보들이 오가서 안정성이 필요한 서비스
 - 연산이 많이 필요한 서비스
 - 프로젝트 단위가 큰 경우
2. Node를 사용하는 것이 좋을 때
 - 요청이 많지만 요청의 데이터가 작은 서비스 (I/O가 많음)
 - 실시간 스트리밍이 필요한 서비스
 - MSA로 서비스를 분리하여 붙일 경우(프로젝트가 작음)
 - 확장성을 염두해야하는 경우
 - 빠르게 작업이 필요한 경우